syntax = "proto3";

package pedidos;

import "google/protobuf/empty.proto";

message ResponseHeader {
  string message = 1;
  int32 status = 2;
  bool success = 3;
}

message Producto {
  int32 cantidad = 1;
  string productoId = 2;
  string nombre = 3;
  double precio = 4;
}

message Pedido {
  string nombre = 1;
  string pedidoId = 2;
  string clienteId = 3;
  string estado = 4;
  string createdAt = 5;
  string updatedAt = 6;
  repeated Producto productos = 7;
}

message ClienteData {
  string nombre = 1;
  string clienteId = 2;
  repeated Pedido pedidos = 3;
}

message ObtenerTodosLosPedidosResponse {
  ResponseHeader header = 1;
  repeated Pedido data = 2;
}

message ObtenerPedidoPorClienteIdRequest {
  string clienteId = 1;
}

message ObtenerPedidoPorClienteIdResponse {
  ResponseHeader header = 1;
  ClienteData data = 2;
}

message CrearNuevoPedidoRequest {
  string clienteId = 1;
  repeated Producto productos = 2;
}

message CrearNuevoPedidoResponse {
  ResponseHeader header = 1;
  Pedido data = 2;
}

message ActualizarDatosPedidoRequest {
  string pedidoId = 1;
  string estado = 2;
}

message ActualizarDatosPedidoResponse {
  ResponseHeader header = 1;
}

message EliminarPedidoRequest {
  string pedidoId = 1;
}

message EliminarPedidoResponse {
  ResponseHeader header = 1;
}

message EliminarTodosLosPedidosRequest {
  string clienteId = 1;
}

message EliminarTodosLosPedidosResponse {
  ResponseHeader header = 1;
}

service Pedidos {
  rpc ObtenerTodosLosPedidos(google.protobuf.Empty) returns (ObtenerTodosLosPedidosResponse) {}
  rpc ObtenerPedidoPorClienteId(ObtenerPedidoPorClienteIdRequest) returns (ObtenerPedidoPorClienteIdResponse) {}
  rpc CrearNuevoPedido(CrearNuevoPedidoRequest) returns (CrearNuevoPedidoResponse) {}
  rpc ActualizarDatosPedido(ActualizarDatosPedidoRequest) returns (ActualizarDatosPedidoResponse) {}
  rpc EliminarPedido(EliminarPedidoRequest) returns (EliminarPedidoResponse) {}
  rpc EliminarTodosLosPedidos(EliminarTodosLosPedidosRequest) returns (EliminarTodosLosPedidosResponse) {}
}

message ClienteTienePedidoPendienteRequest {
  string clienteId = 1;
}

message ClienteTienePedidoPendienteResponse {
  ResponseHeader header = 1;
  bool data = 2;
}

service PedidosClientes {
  rpc ClienteTienePedidoPendiente(ClienteTienePedidoPendienteRequest) returns (ClienteTienePedidoPendienteResponse) {}
  rpc EliminarTodosLosPedidos(EliminarTodosLosPedidosRequest) returns (EliminarTodosLosPedidosResponse) {}
}

message EliminarProductoDeTodosLosPedidosRequest {
  string productoId = 1;
}

message EliminarProductoDeTodosLosPedidosResponse {
  ResponseHeader header = 1;
}

service PedidosProductos {
  rpc EliminarProductoDeTodosLosPedidos(EliminarProductoDeTodosLosPedidosRequest) returns (EliminarProductoDeTodosLosPedidosResponse) {}
}
